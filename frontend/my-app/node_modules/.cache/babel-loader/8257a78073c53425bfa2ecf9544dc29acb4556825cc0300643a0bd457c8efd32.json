{"ast":null,"code":"import * as svgUtils from './utils/svg.js';\nimport { merge as mergeOptions } from './utils/options.js';\nimport { create as createPrng } from './utils/prng.js';\nimport * as license from './utils/license.js';\nimport { getBackgroundColors } from './utils/color.js';\nexport function createAvatar(style, options = {}) {\n  var _a, _b, _c, _d, _e;\n  options = mergeOptions(style, options);\n  const prng = createPrng(options.seed);\n  const result = style.create({\n    prng: prng,\n    options\n  });\n  const backgroundType = prng.pick((_a = options.backgroundType) !== null && _a !== void 0 ? _a : [], 'solid');\n  const {\n    primary: primaryBackgroundColor,\n    secondary: secondaryBackgroundColor\n  } = getBackgroundColors(prng, (_b = options.backgroundColor) !== null && _b !== void 0 ? _b : [], backgroundType);\n  const backgroundRotation = prng.integer(((_c = options.backgroundRotation) === null || _c === void 0 ? void 0 : _c.length) ? Math.min(...options.backgroundRotation) : 0, ((_d = options.backgroundRotation) === null || _d === void 0 ? void 0 : _d.length) ? Math.max(...options.backgroundRotation) : 0);\n  if (options.size) {\n    result.attributes.width = options.size.toString();\n    result.attributes.height = options.size.toString();\n  }\n  if (options.scale !== undefined && options.scale !== 100) {\n    result.body = svgUtils.addScale(result, options.scale);\n  }\n  if (options.flip) {\n    result.body = svgUtils.addFlip(result);\n  }\n  if (options.rotate) {\n    result.body = svgUtils.addRotate(result, options.rotate);\n  }\n  if (options.translateX || options.translateY) {\n    result.body = svgUtils.addTranslate(result, options.translateX, options.translateY);\n  }\n  if (primaryBackgroundColor !== 'transparent' && secondaryBackgroundColor !== 'transparent') {\n    result.body = svgUtils.addBackground(result, primaryBackgroundColor, secondaryBackgroundColor, backgroundType, backgroundRotation);\n  }\n  if (options.radius || options.clip) {\n    result.body = svgUtils.addViewboxMask(result, (_e = options.radius) !== null && _e !== void 0 ? _e : 0);\n  }\n  if (options.randomizeIds) {\n    // Reduces the occurrence of ID collisions when rendering multiple avatars on one HTML page.\n    result.body = svgUtils.randomizeIds(result);\n  }\n  const attributes = svgUtils.createAttrString(result);\n  const metadata = license.xml(style);\n  const svg = `<svg ${attributes}>${metadata}${result.body}</svg>`;\n  return {\n    toString: () => svg,\n    toJson: () => {\n      var _a;\n      return {\n        svg: svg,\n        extra: {\n          primaryBackgroundColor,\n          secondaryBackgroundColor,\n          backgroundType,\n          backgroundRotation,\n          ...((_a = result.extra) === null || _a === void 0 ? void 0 : _a.call(result))\n        }\n      };\n    },\n    toDataUri: () => {\n      return `data:image/svg+xml;utf8,${encodeURIComponent(svg)}`;\n    }\n  };\n}","map":{"version":3,"names":["svgUtils","merge","mergeOptions","create","createPrng","license","getBackgroundColors","createAvatar","style","options","_a","_b","_c","_d","_e","prng","seed","result","backgroundType","pick","primary","primaryBackgroundColor","secondary","secondaryBackgroundColor","backgroundColor","backgroundRotation","integer","length","Math","min","max","size","attributes","width","toString","height","scale","undefined","body","addScale","flip","addFlip","rotate","addRotate","translateX","translateY","addTranslate","addBackground","radius","clip","addViewboxMask","randomizeIds","createAttrString","metadata","xml","svg","toJson","extra","call","toDataUri","encodeURIComponent"],"sources":["/Users/salsabeelsaleh/Desktop/v13 cleanup/capstone-final/frontend/my-app/node_modules/@dicebear/core/lib/core.js"],"sourcesContent":["import * as svgUtils from './utils/svg.js';\nimport { merge as mergeOptions } from './utils/options.js';\nimport { create as createPrng } from './utils/prng.js';\nimport * as license from './utils/license.js';\nimport { getBackgroundColors } from './utils/color.js';\nexport function createAvatar(style, options = {}) {\n    var _a, _b, _c, _d, _e;\n    options = mergeOptions(style, options);\n    const prng = createPrng(options.seed);\n    const result = style.create({ prng: prng, options });\n    const backgroundType = prng.pick((_a = options.backgroundType) !== null && _a !== void 0 ? _a : [], 'solid');\n    const { primary: primaryBackgroundColor, secondary: secondaryBackgroundColor, } = getBackgroundColors(prng, (_b = options.backgroundColor) !== null && _b !== void 0 ? _b : [], backgroundType);\n    const backgroundRotation = prng.integer(((_c = options.backgroundRotation) === null || _c === void 0 ? void 0 : _c.length)\n        ? Math.min(...options.backgroundRotation)\n        : 0, ((_d = options.backgroundRotation) === null || _d === void 0 ? void 0 : _d.length)\n        ? Math.max(...options.backgroundRotation)\n        : 0);\n    if (options.size) {\n        result.attributes.width = options.size.toString();\n        result.attributes.height = options.size.toString();\n    }\n    if (options.scale !== undefined && options.scale !== 100) {\n        result.body = svgUtils.addScale(result, options.scale);\n    }\n    if (options.flip) {\n        result.body = svgUtils.addFlip(result);\n    }\n    if (options.rotate) {\n        result.body = svgUtils.addRotate(result, options.rotate);\n    }\n    if (options.translateX || options.translateY) {\n        result.body = svgUtils.addTranslate(result, options.translateX, options.translateY);\n    }\n    if (primaryBackgroundColor !== 'transparent' &&\n        secondaryBackgroundColor !== 'transparent') {\n        result.body = svgUtils.addBackground(result, primaryBackgroundColor, secondaryBackgroundColor, backgroundType, backgroundRotation);\n    }\n    if (options.radius || options.clip) {\n        result.body = svgUtils.addViewboxMask(result, (_e = options.radius) !== null && _e !== void 0 ? _e : 0);\n    }\n    if (options.randomizeIds) {\n        // Reduces the occurrence of ID collisions when rendering multiple avatars on one HTML page.\n        result.body = svgUtils.randomizeIds(result);\n    }\n    const attributes = svgUtils.createAttrString(result);\n    const metadata = license.xml(style);\n    const svg = `<svg ${attributes}>${metadata}${result.body}</svg>`;\n    return {\n        toString: () => svg,\n        toJson: () => {\n            var _a;\n            return ({\n                svg: svg,\n                extra: {\n                    primaryBackgroundColor,\n                    secondaryBackgroundColor,\n                    backgroundType,\n                    backgroundRotation,\n                    ...(_a = result.extra) === null || _a === void 0 ? void 0 : _a.call(result),\n                },\n            });\n        },\n        toDataUri: () => {\n            return `data:image/svg+xml;utf8,${encodeURIComponent(svg)}`;\n        },\n    };\n}\n"],"mappings":"AAAA,OAAO,KAAKA,QAAQ,MAAM,gBAAgB;AAC1C,SAASC,KAAK,IAAIC,YAAY,QAAQ,oBAAoB;AAC1D,SAASC,MAAM,IAAIC,UAAU,QAAQ,iBAAiB;AACtD,OAAO,KAAKC,OAAO,MAAM,oBAAoB;AAC7C,SAASC,mBAAmB,QAAQ,kBAAkB;AACtD,OAAO,SAASC,YAAYA,CAACC,KAAK,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC9C,IAAIC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE;EACtBL,OAAO,GAAGP,YAAY,CAACM,KAAK,EAAEC,OAAO,CAAC;EACtC,MAAMM,IAAI,GAAGX,UAAU,CAACK,OAAO,CAACO,IAAI,CAAC;EACrC,MAAMC,MAAM,GAAGT,KAAK,CAACL,MAAM,CAAC;IAAEY,IAAI,EAAEA,IAAI;IAAEN;EAAQ,CAAC,CAAC;EACpD,MAAMS,cAAc,GAAGH,IAAI,CAACI,IAAI,CAAC,CAACT,EAAE,GAAGD,OAAO,CAACS,cAAc,MAAM,IAAI,IAAIR,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,EAAE,EAAE,OAAO,CAAC;EAC5G,MAAM;IAAEU,OAAO,EAAEC,sBAAsB;IAAEC,SAAS,EAAEC;EAA0B,CAAC,GAAGjB,mBAAmB,CAACS,IAAI,EAAE,CAACJ,EAAE,GAAGF,OAAO,CAACe,eAAe,MAAM,IAAI,IAAIb,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,EAAE,EAAEO,cAAc,CAAC;EAC/L,MAAMO,kBAAkB,GAAGV,IAAI,CAACW,OAAO,CAAC,CAAC,CAACd,EAAE,GAAGH,OAAO,CAACgB,kBAAkB,MAAM,IAAI,IAAIb,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACe,MAAM,IACnHC,IAAI,CAACC,GAAG,CAAC,GAAGpB,OAAO,CAACgB,kBAAkB,CAAC,GACvC,CAAC,EAAE,CAAC,CAACZ,EAAE,GAAGJ,OAAO,CAACgB,kBAAkB,MAAM,IAAI,IAAIZ,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACc,MAAM,IACpFC,IAAI,CAACE,GAAG,CAAC,GAAGrB,OAAO,CAACgB,kBAAkB,CAAC,GACvC,CAAC,CAAC;EACR,IAAIhB,OAAO,CAACsB,IAAI,EAAE;IACdd,MAAM,CAACe,UAAU,CAACC,KAAK,GAAGxB,OAAO,CAACsB,IAAI,CAACG,QAAQ,CAAC,CAAC;IACjDjB,MAAM,CAACe,UAAU,CAACG,MAAM,GAAG1B,OAAO,CAACsB,IAAI,CAACG,QAAQ,CAAC,CAAC;EACtD;EACA,IAAIzB,OAAO,CAAC2B,KAAK,KAAKC,SAAS,IAAI5B,OAAO,CAAC2B,KAAK,KAAK,GAAG,EAAE;IACtDnB,MAAM,CAACqB,IAAI,GAAGtC,QAAQ,CAACuC,QAAQ,CAACtB,MAAM,EAAER,OAAO,CAAC2B,KAAK,CAAC;EAC1D;EACA,IAAI3B,OAAO,CAAC+B,IAAI,EAAE;IACdvB,MAAM,CAACqB,IAAI,GAAGtC,QAAQ,CAACyC,OAAO,CAACxB,MAAM,CAAC;EAC1C;EACA,IAAIR,OAAO,CAACiC,MAAM,EAAE;IAChBzB,MAAM,CAACqB,IAAI,GAAGtC,QAAQ,CAAC2C,SAAS,CAAC1B,MAAM,EAAER,OAAO,CAACiC,MAAM,CAAC;EAC5D;EACA,IAAIjC,OAAO,CAACmC,UAAU,IAAInC,OAAO,CAACoC,UAAU,EAAE;IAC1C5B,MAAM,CAACqB,IAAI,GAAGtC,QAAQ,CAAC8C,YAAY,CAAC7B,MAAM,EAAER,OAAO,CAACmC,UAAU,EAAEnC,OAAO,CAACoC,UAAU,CAAC;EACvF;EACA,IAAIxB,sBAAsB,KAAK,aAAa,IACxCE,wBAAwB,KAAK,aAAa,EAAE;IAC5CN,MAAM,CAACqB,IAAI,GAAGtC,QAAQ,CAAC+C,aAAa,CAAC9B,MAAM,EAAEI,sBAAsB,EAAEE,wBAAwB,EAAEL,cAAc,EAAEO,kBAAkB,CAAC;EACtI;EACA,IAAIhB,OAAO,CAACuC,MAAM,IAAIvC,OAAO,CAACwC,IAAI,EAAE;IAChChC,MAAM,CAACqB,IAAI,GAAGtC,QAAQ,CAACkD,cAAc,CAACjC,MAAM,EAAE,CAACH,EAAE,GAAGL,OAAO,CAACuC,MAAM,MAAM,IAAI,IAAIlC,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,CAAC;EAC3G;EACA,IAAIL,OAAO,CAAC0C,YAAY,EAAE;IACtB;IACAlC,MAAM,CAACqB,IAAI,GAAGtC,QAAQ,CAACmD,YAAY,CAAClC,MAAM,CAAC;EAC/C;EACA,MAAMe,UAAU,GAAGhC,QAAQ,CAACoD,gBAAgB,CAACnC,MAAM,CAAC;EACpD,MAAMoC,QAAQ,GAAGhD,OAAO,CAACiD,GAAG,CAAC9C,KAAK,CAAC;EACnC,MAAM+C,GAAG,GAAG,QAAQvB,UAAU,IAAIqB,QAAQ,GAAGpC,MAAM,CAACqB,IAAI,QAAQ;EAChE,OAAO;IACHJ,QAAQ,EAAEA,CAAA,KAAMqB,GAAG;IACnBC,MAAM,EAAEA,CAAA,KAAM;MACV,IAAI9C,EAAE;MACN,OAAQ;QACJ6C,GAAG,EAAEA,GAAG;QACRE,KAAK,EAAE;UACHpC,sBAAsB;UACtBE,wBAAwB;UACxBL,cAAc;UACdO,kBAAkB;UAClB,IAAG,CAACf,EAAE,GAAGO,MAAM,CAACwC,KAAK,MAAM,IAAI,IAAI/C,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACgD,IAAI,CAACzC,MAAM,CAAC;QAC/E;MACJ,CAAC;IACL,CAAC;IACD0C,SAAS,EAAEA,CAAA,KAAM;MACb,OAAO,2BAA2BC,kBAAkB,CAACL,GAAG,CAAC,EAAE;IAC/D;EACJ,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}