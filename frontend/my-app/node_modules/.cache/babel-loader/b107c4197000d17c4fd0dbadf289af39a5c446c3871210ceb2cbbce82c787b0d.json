{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || \"http://127.0.0.1:8000\";\n\n// Register a new user\nexport const registerUser = async userData => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/auth/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userData)\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || \"Registration failed\");\n    }\n    return data;\n  } catch (error) {\n    console.error(\"Registration error:\", error);\n    return {\n      error: error.message\n    };\n  }\n};\n\n// Login user\nexport const loginUser = async credentials => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/auth/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(credentials)\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || \"Login failed\");\n    }\n    return data;\n  } catch (error) {\n    console.error(\"Login error:\", error);\n    return {\n      error: error.message\n    };\n  }\n};\n\n// Get user profile data\nexport const getUserProfile = async userId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/user/profile/${userId}`);\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || \"Failed to fetch profile\");\n    }\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching user profile:\", error.message);\n    throw error;\n  }\n};\n\n// Update user profile (including username, email, avatar, and language)\nexport const updateUserProfile = async (userId, updatedData) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/user/profile/${userId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem(\"access_token\")}` // Add the JWT token for authorization\n      },\n      body: JSON.stringify(updatedData) // The data to be updated\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || \"Failed to update profile\");\n    }\n    return data;\n  } catch (error) {\n    console.error(\"Error updating profile:\", error);\n    return {\n      error: error.message\n    };\n  }\n};\n\n// Send image data for emotion detection\nexport const sendDetectionData = async imageData => {\n  const response = await fetch(`${API_BASE_URL}/detect-emotion`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      image: imageData\n    })\n  });\n  return response.json();\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","registerUser","userData","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","error","console","message","loginUser","credentials","getUserProfile","userId","updateUserProfile","updatedData","localStorage","getItem","sendDetectionData","imageData","image"],"sources":["/Users/salsabeelsaleh/Desktop/v12/capstone-final/frontend/my-app/src/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || \"http://127.0.0.1:8000\";\n\n// Register a new user\nexport const registerUser = async (userData) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}/auth/register`, {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(userData),\n        });\n\n        const data = await response.json();\n\n        if (!response.ok) {\n            throw new Error(data.error || \"Registration failed\");\n        }\n\n        return data;\n    } catch (error) {\n        console.error(\"Registration error:\", error);\n        return { error: error.message };\n    }\n};\n\n// Login user\nexport const loginUser = async (credentials) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}/auth/login`, {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(credentials),\n        });\n\n        const data = await response.json();\n\n        if (!response.ok) {\n            throw new Error(data.error || \"Login failed\");\n        }\n\n        return data;\n    } catch (error) {\n        console.error(\"Login error:\", error);\n        return { error: error.message };\n    }\n};\n\n// Get user profile data\nexport const getUserProfile = async (userId) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}/user/profile/${userId}`);\n        const data = await response.json();\n\n        if (!response.ok) {\n            throw new Error(data.error || \"Failed to fetch profile\");\n        }\n\n        return data;\n    } catch (error) {\n        console.error(\"Error fetching user profile:\", error.message);\n        throw error;\n    }\n};\n\n// Update user profile (including username, email, avatar, and language)\nexport const updateUserProfile = async (userId, updatedData) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}/user/profile/${userId}`, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${localStorage.getItem(\"access_token\")}` // Add the JWT token for authorization\n            },\n            body: JSON.stringify(updatedData),  // The data to be updated\n        });\n\n        const data = await response.json();\n\n        if (!response.ok) {\n            throw new Error(data.error || \"Failed to update profile\");\n        }\n\n        return data;\n    } catch (error) {\n        console.error(\"Error updating profile:\", error);\n        return { error: error.message };\n    }\n};\n\n// Send image data for emotion detection\nexport const sendDetectionData = async (imageData) => {\n    const response = await fetch(`${API_BASE_URL}/detect-emotion`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ image: imageData }),\n    });\n\n    return response.json();\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}