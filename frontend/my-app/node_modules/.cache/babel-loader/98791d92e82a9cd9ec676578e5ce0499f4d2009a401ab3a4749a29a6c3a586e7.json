{"ast":null,"code":"import * as escape from './escape.js';\nimport { create as createPrng } from './prng.js';\nexport function getViewBox(result) {\n  let viewBox = result.attributes['viewBox'].split(' ');\n  let x = parseInt(viewBox[0]);\n  let y = parseInt(viewBox[1]);\n  let width = parseInt(viewBox[2]);\n  let height = parseInt(viewBox[3]);\n  return {\n    x,\n    y,\n    width,\n    height\n  };\n}\nexport function addBackground(result, primaryColor, secondaryColor, type, rotation) {\n  let {\n    width,\n    height,\n    x,\n    y\n  } = getViewBox(result);\n  const solidBackground = `<rect fill=\"${primaryColor}\" width=\"${width}\" height=\"${height}\" x=\"${x}\" y=\"${y}\" />`;\n  switch (type) {\n    case 'solid':\n      return solidBackground + result.body;\n    case 'gradientLinear':\n      return `<rect fill=\"url(#backgroundLinear)\" width=\"${width}\" height=\"${height}\" x=\"${x}\" y=\"${y}\" />` + `<defs>` + `<linearGradient id=\"backgroundLinear\" gradientTransform=\"rotate(${rotation} 0.5 0.5)\">` + `<stop stop-color=\"${primaryColor}\"/>` + `<stop offset=\"1\" stop-color=\"${secondaryColor}\"/>` + `</linearGradient>` + `</defs>` + result.body;\n  }\n}\nexport function addScale(result, scale) {\n  let {\n    width,\n    height,\n    x,\n    y\n  } = getViewBox(result);\n  let percent = scale ? (scale - 100) / 100 : 0;\n  let translateX = (width / 2 + x) * percent * -1;\n  let translateY = (height / 2 + y) * percent * -1;\n  return `<g transform=\"translate(${translateX} ${translateY}) scale(${scale / 100})\">${result.body}</g>`;\n}\nexport function addTranslate(result, x, y) {\n  let viewBox = getViewBox(result);\n  let translateX = (viewBox.width + viewBox.x * 2) * ((x !== null && x !== void 0 ? x : 0) / 100);\n  let translateY = (viewBox.height + viewBox.y * 2) * ((y !== null && y !== void 0 ? y : 0) / 100);\n  return `<g transform=\"translate(${translateX} ${translateY})\">${result.body}</g>`;\n}\nexport function addRotate(result, rotate) {\n  let {\n    width,\n    height,\n    x,\n    y\n  } = getViewBox(result);\n  return `<g transform=\"rotate(${rotate}, ${width / 2 + x}, ${height / 2 + y})\">${result.body}</g>`;\n}\nexport function addFlip(result) {\n  let {\n    width,\n    x\n  } = getViewBox(result);\n  return `<g transform=\"scale(-1 1) translate(${width * -1 - x * 2} 0)\">${result.body}</g>`;\n}\nexport function addViewboxMask(result, radius) {\n  let {\n    width,\n    height,\n    x,\n    y\n  } = getViewBox(result);\n  let rx = radius ? width * radius / 100 : 0;\n  let ry = radius ? height * radius / 100 : 0;\n  return `<mask id=\"viewboxMask\">` + `<rect width=\"${width}\" height=\"${height}\" rx=\"${rx}\" ry=\"${ry}\" x=\"${x}\" y=\"${y}\" fill=\"#fff\" />` + `</mask>` + `<g mask=\"url(#viewboxMask)\">${result.body}</g>`;\n}\nexport function createAttrString(result) {\n  const attributes = {\n    xmlns: 'http://www.w3.org/2000/svg',\n    ...result.attributes\n  };\n  return Object.keys(attributes).map(attr => `${escape.xml(attr)}=\"${escape.xml(attributes[attr])}\"`).join(' ');\n}\nexport function randomizeIds(result) {\n  const prng = createPrng(Math.random().toString());\n  const ids = {};\n  return result.body.replace(/(id=\"|url\\(#)([a-z0-9-_]+)([\")])/gi, (match, m1, m2, m3) => {\n    ids[m2] = ids[m2] || prng.string(8);\n    return `${m1}${ids[m2]}${m3}`;\n  });\n}","map":{"version":3,"names":["escape","create","createPrng","getViewBox","result","viewBox","attributes","split","x","parseInt","y","width","height","addBackground","primaryColor","secondaryColor","type","rotation","solidBackground","body","addScale","scale","percent","translateX","translateY","addTranslate","addRotate","rotate","addFlip","addViewboxMask","radius","rx","ry","createAttrString","xmlns","Object","keys","map","attr","xml","join","randomizeIds","prng","Math","random","toString","ids","replace","match","m1","m2","m3","string"],"sources":["/Users/salsabeelsaleh/Desktop/v13/capstone-final/frontend/my-app/node_modules/@dicebear/core/lib/utils/svg.js"],"sourcesContent":["import * as escape from './escape.js';\nimport { create as createPrng } from './prng.js';\nexport function getViewBox(result) {\n    let viewBox = result.attributes['viewBox'].split(' ');\n    let x = parseInt(viewBox[0]);\n    let y = parseInt(viewBox[1]);\n    let width = parseInt(viewBox[2]);\n    let height = parseInt(viewBox[3]);\n    return {\n        x,\n        y,\n        width,\n        height,\n    };\n}\nexport function addBackground(result, primaryColor, secondaryColor, type, rotation) {\n    let { width, height, x, y } = getViewBox(result);\n    const solidBackground = `<rect fill=\"${primaryColor}\" width=\"${width}\" height=\"${height}\" x=\"${x}\" y=\"${y}\" />`;\n    switch (type) {\n        case 'solid':\n            return solidBackground + result.body;\n        case 'gradientLinear':\n            return (`<rect fill=\"url(#backgroundLinear)\" width=\"${width}\" height=\"${height}\" x=\"${x}\" y=\"${y}\" />` +\n                `<defs>` +\n                `<linearGradient id=\"backgroundLinear\" gradientTransform=\"rotate(${rotation} 0.5 0.5)\">` +\n                `<stop stop-color=\"${primaryColor}\"/>` +\n                `<stop offset=\"1\" stop-color=\"${secondaryColor}\"/>` +\n                `</linearGradient>` +\n                `</defs>` +\n                result.body);\n    }\n}\nexport function addScale(result, scale) {\n    let { width, height, x, y } = getViewBox(result);\n    let percent = scale ? (scale - 100) / 100 : 0;\n    let translateX = (width / 2 + x) * percent * -1;\n    let translateY = (height / 2 + y) * percent * -1;\n    return `<g transform=\"translate(${translateX} ${translateY}) scale(${scale / 100})\">${result.body}</g>`;\n}\nexport function addTranslate(result, x, y) {\n    let viewBox = getViewBox(result);\n    let translateX = (viewBox.width + viewBox.x * 2) * ((x !== null && x !== void 0 ? x : 0) / 100);\n    let translateY = (viewBox.height + viewBox.y * 2) * ((y !== null && y !== void 0 ? y : 0) / 100);\n    return `<g transform=\"translate(${translateX} ${translateY})\">${result.body}</g>`;\n}\nexport function addRotate(result, rotate) {\n    let { width, height, x, y } = getViewBox(result);\n    return `<g transform=\"rotate(${rotate}, ${width / 2 + x}, ${height / 2 + y})\">${result.body}</g>`;\n}\nexport function addFlip(result) {\n    let { width, x } = getViewBox(result);\n    return `<g transform=\"scale(-1 1) translate(${width * -1 - x * 2} 0)\">${result.body}</g>`;\n}\nexport function addViewboxMask(result, radius) {\n    let { width, height, x, y } = getViewBox(result);\n    let rx = radius ? (width * radius) / 100 : 0;\n    let ry = radius ? (height * radius) / 100 : 0;\n    return (`<mask id=\"viewboxMask\">` +\n        `<rect width=\"${width}\" height=\"${height}\" rx=\"${rx}\" ry=\"${ry}\" x=\"${x}\" y=\"${y}\" fill=\"#fff\" />` +\n        `</mask>` +\n        `<g mask=\"url(#viewboxMask)\">${result.body}</g>`);\n}\nexport function createAttrString(result) {\n    const attributes = {\n        xmlns: 'http://www.w3.org/2000/svg',\n        ...result.attributes,\n    };\n    return Object.keys(attributes)\n        .map((attr) => `${escape.xml(attr)}=\"${escape.xml(attributes[attr])}\"`)\n        .join(' ');\n}\nexport function randomizeIds(result) {\n    const prng = createPrng(Math.random().toString());\n    const ids = {};\n    return result.body.replace(/(id=\"|url\\(#)([a-z0-9-_]+)([\")])/gi, (match, m1, m2, m3) => {\n        ids[m2] = ids[m2] || prng.string(8);\n        return `${m1}${ids[m2]}${m3}`;\n    });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}