{"ast":null,"code":"const MIN = -2147483648;\nconst MAX = 2147483647;\nfunction xorshift(value) {\n  value ^= value << 13;\n  value ^= value >> 17;\n  value ^= value << 5;\n  return value;\n}\nfunction hashSeed(seed) {\n  let hash = 0;\n  for (let i = 0; i < seed.length; i++) {\n    hash = (hash << 5) - hash + seed.charCodeAt(i) | 0;\n    hash = xorshift(hash);\n  }\n  return hash;\n}\nexport function create(seed = '') {\n  // Ensure that seed is a string\n  seed = seed.toString();\n  let value = hashSeed(seed) || 1;\n  const next = () => value = xorshift(value);\n  const integer = (min, max) => {\n    return Math.floor((next() - MIN) / (MAX - MIN) * (max + 1 - min) + min);\n  };\n  return {\n    seed,\n    next,\n    bool(likelihood = 50) {\n      return integer(1, 100) <= likelihood;\n    },\n    integer(min, max) {\n      return integer(min, max);\n    },\n    pick(arr, fallback) {\n      var _a;\n      if (arr.length === 0) {\n        next();\n        return fallback;\n      }\n      return (_a = arr[integer(0, arr.length - 1)]) !== null && _a !== void 0 ? _a : fallback;\n    },\n    shuffle(arr) {\n      // Each method call should call the `next` function only once.\n      // Therefore, we use a separate instance of the PRNG here.\n      const internalPrng = create(next().toString());\n      // Fisher-Yates shuffle algorithm - We do not use the Array.sort method\n      // because it is not stable and produces different results when used in\n      // different browsers. See: https://github.com/dicebear/dicebear/issues/394\n      const workingArray = [...arr];\n      for (let i = workingArray.length - 1; i > 0; i--) {\n        const j = internalPrng.integer(0, i);\n        [workingArray[i], workingArray[j]] = [workingArray[j], workingArray[i]];\n      }\n      return workingArray;\n    },\n    string(length, characters = 'abcdefghijklmnopqrstuvwxyz1234567890') {\n      // Each method call should call the `next` function only once.\n      // Therefore, we use a separate instance of the PRNG here.\n      const internalPrng = create(next().toString());\n      let str = '';\n      for (let i = 0; i < length; i++) {\n        str += characters[internalPrng.integer(0, characters.length - 1)];\n      }\n      return str;\n    }\n  };\n}","map":{"version":3,"names":["MIN","MAX","xorshift","value","hashSeed","seed","hash","i","length","charCodeAt","create","toString","next","integer","min","max","Math","floor","bool","likelihood","pick","arr","fallback","_a","shuffle","internalPrng","workingArray","j","string","characters","str"],"sources":["/Users/salsabeelsaleh/Desktop/v13 cleanup/capstone-final/frontend/my-app/node_modules/@dicebear/core/lib/utils/prng.js"],"sourcesContent":["const MIN = -2147483648;\nconst MAX = 2147483647;\nfunction xorshift(value) {\n    value ^= value << 13;\n    value ^= value >> 17;\n    value ^= value << 5;\n    return value;\n}\nfunction hashSeed(seed) {\n    let hash = 0;\n    for (let i = 0; i < seed.length; i++) {\n        hash = ((hash << 5) - hash + seed.charCodeAt(i)) | 0;\n        hash = xorshift(hash);\n    }\n    return hash;\n}\nexport function create(seed = '') {\n    // Ensure that seed is a string\n    seed = seed.toString();\n    let value = hashSeed(seed) || 1;\n    const next = () => (value = xorshift(value));\n    const integer = (min, max) => {\n        return Math.floor(((next() - MIN) / (MAX - MIN)) * (max + 1 - min) + min);\n    };\n    return {\n        seed,\n        next,\n        bool(likelihood = 50) {\n            return integer(1, 100) <= likelihood;\n        },\n        integer(min, max) {\n            return integer(min, max);\n        },\n        pick(arr, fallback) {\n            var _a;\n            if (arr.length === 0) {\n                next();\n                return fallback;\n            }\n            return (_a = arr[integer(0, arr.length - 1)]) !== null && _a !== void 0 ? _a : fallback;\n        },\n        shuffle(arr) {\n            // Each method call should call the `next` function only once.\n            // Therefore, we use a separate instance of the PRNG here.\n            const internalPrng = create(next().toString());\n            // Fisher-Yates shuffle algorithm - We do not use the Array.sort method\n            // because it is not stable and produces different results when used in\n            // different browsers. See: https://github.com/dicebear/dicebear/issues/394\n            const workingArray = [...arr];\n            for (let i = workingArray.length - 1; i > 0; i--) {\n                const j = internalPrng.integer(0, i);\n                [workingArray[i], workingArray[j]] = [workingArray[j], workingArray[i]];\n            }\n            return workingArray;\n        },\n        string(length, characters = 'abcdefghijklmnopqrstuvwxyz1234567890') {\n            // Each method call should call the `next` function only once.\n            // Therefore, we use a separate instance of the PRNG here.\n            const internalPrng = create(next().toString());\n            let str = '';\n            for (let i = 0; i < length; i++) {\n                str += characters[internalPrng.integer(0, characters.length - 1)];\n            }\n            return str;\n        },\n    };\n}\n"],"mappings":"AAAA,MAAMA,GAAG,GAAG,CAAC,UAAU;AACvB,MAAMC,GAAG,GAAG,UAAU;AACtB,SAASC,QAAQA,CAACC,KAAK,EAAE;EACrBA,KAAK,IAAIA,KAAK,IAAI,EAAE;EACpBA,KAAK,IAAIA,KAAK,IAAI,EAAE;EACpBA,KAAK,IAAIA,KAAK,IAAI,CAAC;EACnB,OAAOA,KAAK;AAChB;AACA,SAASC,QAAQA,CAACC,IAAI,EAAE;EACpB,IAAIC,IAAI,GAAG,CAAC;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IAClCD,IAAI,GAAI,CAACA,IAAI,IAAI,CAAC,IAAIA,IAAI,GAAGD,IAAI,CAACI,UAAU,CAACF,CAAC,CAAC,GAAI,CAAC;IACpDD,IAAI,GAAGJ,QAAQ,CAACI,IAAI,CAAC;EACzB;EACA,OAAOA,IAAI;AACf;AACA,OAAO,SAASI,MAAMA,CAACL,IAAI,GAAG,EAAE,EAAE;EAC9B;EACAA,IAAI,GAAGA,IAAI,CAACM,QAAQ,CAAC,CAAC;EACtB,IAAIR,KAAK,GAAGC,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC;EAC/B,MAAMO,IAAI,GAAGA,CAAA,KAAOT,KAAK,GAAGD,QAAQ,CAACC,KAAK,CAAE;EAC5C,MAAMU,OAAO,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;IAC1B,OAAOC,IAAI,CAACC,KAAK,CAAE,CAACL,IAAI,CAAC,CAAC,GAAGZ,GAAG,KAAKC,GAAG,GAAGD,GAAG,CAAC,IAAKe,GAAG,GAAG,CAAC,GAAGD,GAAG,CAAC,GAAGA,GAAG,CAAC;EAC7E,CAAC;EACD,OAAO;IACHT,IAAI;IACJO,IAAI;IACJM,IAAIA,CAACC,UAAU,GAAG,EAAE,EAAE;MAClB,OAAON,OAAO,CAAC,CAAC,EAAE,GAAG,CAAC,IAAIM,UAAU;IACxC,CAAC;IACDN,OAAOA,CAACC,GAAG,EAAEC,GAAG,EAAE;MACd,OAAOF,OAAO,CAACC,GAAG,EAAEC,GAAG,CAAC;IAC5B,CAAC;IACDK,IAAIA,CAACC,GAAG,EAAEC,QAAQ,EAAE;MAChB,IAAIC,EAAE;MACN,IAAIF,GAAG,CAACb,MAAM,KAAK,CAAC,EAAE;QAClBI,IAAI,CAAC,CAAC;QACN,OAAOU,QAAQ;MACnB;MACA,OAAO,CAACC,EAAE,GAAGF,GAAG,CAACR,OAAO,CAAC,CAAC,EAAEQ,GAAG,CAACb,MAAM,GAAG,CAAC,CAAC,CAAC,MAAM,IAAI,IAAIe,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGD,QAAQ;IAC3F,CAAC;IACDE,OAAOA,CAACH,GAAG,EAAE;MACT;MACA;MACA,MAAMI,YAAY,GAAGf,MAAM,CAACE,IAAI,CAAC,CAAC,CAACD,QAAQ,CAAC,CAAC,CAAC;MAC9C;MACA;MACA;MACA,MAAMe,YAAY,GAAG,CAAC,GAAGL,GAAG,CAAC;MAC7B,KAAK,IAAId,CAAC,GAAGmB,YAAY,CAAClB,MAAM,GAAG,CAAC,EAAED,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC9C,MAAMoB,CAAC,GAAGF,YAAY,CAACZ,OAAO,CAAC,CAAC,EAAEN,CAAC,CAAC;QACpC,CAACmB,YAAY,CAACnB,CAAC,CAAC,EAAEmB,YAAY,CAACC,CAAC,CAAC,CAAC,GAAG,CAACD,YAAY,CAACC,CAAC,CAAC,EAAED,YAAY,CAACnB,CAAC,CAAC,CAAC;MAC3E;MACA,OAAOmB,YAAY;IACvB,CAAC;IACDE,MAAMA,CAACpB,MAAM,EAAEqB,UAAU,GAAG,sCAAsC,EAAE;MAChE;MACA;MACA,MAAMJ,YAAY,GAAGf,MAAM,CAACE,IAAI,CAAC,CAAC,CAACD,QAAQ,CAAC,CAAC,CAAC;MAC9C,IAAImB,GAAG,GAAG,EAAE;MACZ,KAAK,IAAIvB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,MAAM,EAAED,CAAC,EAAE,EAAE;QAC7BuB,GAAG,IAAID,UAAU,CAACJ,YAAY,CAACZ,OAAO,CAAC,CAAC,EAAEgB,UAAU,CAACrB,MAAM,GAAG,CAAC,CAAC,CAAC;MACrE;MACA,OAAOsB,GAAG;IACd;EACJ,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}